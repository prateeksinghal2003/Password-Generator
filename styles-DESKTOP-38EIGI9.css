*
{
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    
}


/* HSL Value
In CSS, a color can be specified using hue, saturation, and lightness (HSL) in the form:

hsl(hue, saturation, lightness)

Hue is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue.

Saturation is a percentage value. 0% means a shade of gray, and 100% is the full color.

Lightness is also a percentage. 0% is black, 50% is neither light or dark, 100% is white */



/* The max-height property defines the maximum height of an element.
If the content is larger than the maximum height, it will overflow. How the container will handle the overflowing content is defined by the overflow property.
If the content is smaller than the maximum height, the max-height property has no effect.
Note: This prevents the value of the height property from becoming larger than max-height.*/


/* The max-width property defines the maximum width of an element.
If the content is larger than the maximum width, it will automatically change the height of the element.
If the content is smaller than the maximum width, the max-width property has no effect.
Note: This prevents the value of the width property from becoming larger than max-width. */

body
{
    
   /* vw (viewport width) and vh (viewport height) are relative units in CSS that adjust based on the size of the viewport
   (the visible area of the browser window).
   vw (Viewport Width)
   1vw = 1% of the width of the browser window.
   100vw = Full width of the viewport. */

   /* vh (Viewport Height)
  1vh = 1% of the height of the viewport.
  100vh = Full height of the viewport. */

    width: 100vw;
    height: 100vh;

    display: flex;
     flex-direction: column;

    /*align-items: center; aligns all child elements in the center of the cross-axis.
     Cross-axis direction depends on flex-direction:

     flex-direction: row; → Aligns items vertically (default).
     flex-direction: column; → Aligns items horizontally.
     flex-direction: column; → Stacks items vertically (from top to bottom).

     align-items: center; → Centers items horizontally (since the cross-axis is now left to right).
     justify-content: center; → Centers items vertically (along the main axis, which is now  top to bottom). */


    align-items: center; 
    justify-content: center;

    /* rgba(r, g, b, a)

    r, g, b → Red, Green, Blue (0–255 values).
    a → Alpha (opacity, where 1 is fully visible, 0 is fully transparent). */

    background: linear-gradient(231deg, rgba(22,6,40,1) 0%, rgba(52,28,79,1) 50%,rgba(88,7,125,1)100%);
}

/* By default, a <button> has styles like:

Background color
Padding & margin
Border
Font styles
Hover & focus effects
Cursor style
With all: unset;, the button loses all these styles and behaves like a plain text element.

 The button has a background color, padding, and pointer cursor.
 After Applying all: unset;
 The button loses all styles and looks like regular text. */


button {
    all: unset;
    cursor: pointer;
  }


.conatiner
{
 
    width: 90%;
    max-width: 450px;
}

h1
{
    opacity: 0.75;
    text-transform: uppercase;
    letter-spacing: 2px;
    text-align: center;
    line-height: 1.2;
    color: hsl(0,0%,100%);
    
}

.display-container
{
    position: relative;
    background-color: hsl(290,70%,36%);
    border-radius: 1rem;
     border-bottom :0.35rem solid hsl(285,70%,36%); 
    margin: 1rem 0;
    padding-top: 0.35 rem;
}


.password_display
{
    color:hsl(52,100%,62%);
    width: 100%;
    background-color: transparent;
    padding: 1.15rem  1rem;
    font-weight: 600;
    font-size: 1.5rem;
    line-height: 30px;
    letter-spacing: 1px;
    padding-right: 3.25rem;
    border: none;
}


.password_display::placeholder
{
    position: absolute;

    /* Moves the element’s top edge 32% down from its nearest positioned parent (relative)
    Moves the element’s left edge 1.5rem to the right from the parent. */

    top: 32%;
    left: 1.5rem;
    font-size: 1.5rem;
    line-height: 30px;
    opacity: 0.65;
    color:hsl(52,100%,62%);
    text-transform: capitalize;
}

/* .display-container button */
.cpybtn
{
  position: absolute;
  top: 50%;
  right: 1.5rem;
  transform: translateY(-50%);


}

.input-container
{
    width: 100%;
    background-color: hsl(281,89%,26%);
    border-radius: 1rem;
    padding: 2rem;
    border-bottom :0.35rem solid hsl(285,70%,36%); 
}


.length-container
{
    display: flex;
      /* flex-direction: row; */
    justify-content: space-between;
    align-items: center;
  
}


 .psstxt
{ 
    font-size: 1.5rem;
    color:hsl(0,0%,100%);
}

.password-length
{
  color:hsl(52,100%,62%);
  font-size: 1.5rem;

}

.strength-container
{
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 1.75rem;
    margin-bottom: 2rem;
}


.strength-container p
{
    font-size: 1.5rem;
    color: hsl(0,0%,100%);
}

.circle
{
    width: 1.5rem;
    height: 1.5rem;
    border-radius: 50%;

}


.password-generator
{
  width: 100%;
  padding: 1rem 0;
  background-color: hsl(285,91%,52%);
  text-align: center;
  border-radius: 0.75rem;

  /* border-bottom → Applies a border only to the bottom of the element.
   0.35rem → The thickness of the border (1rem = root font size, usually 16px, so 0.35rem = 5.6px).
   solid → The border style (a continuous line).
   hsl(52,100%,62%) → The border color, using the HSL color model. */
   
  border-bottom: 0.35rem solid  hsl(52,100%,62%);
  letter-spacing: 1px;
  font-family: 600;
  text-transform: uppercase;
  color: hsl(52,100%,62%);
  font-size: 1.25rem;
}


.check
{
    display: flex;
    align-items: center;
    margin: 1rem 0;
    gap: 0 1rem;
}


.check input
{
    appearance: none;/* styling done by browser is prevented*/
    width: 20px;
    height: 20px;
    border: 1px solid hsl(176,100%,44%);
    cursor: pointer;
    position: relative;
    border-radius: 0.35rem;
}

.check input:checked
{
    background-color: hsl(176,100%,44%); ;
}


.check input:checked::after
{
    content:'✓';
    position: absolute;
    color:hsl(198,20%,13%);
    font-size: 1.05rem;
    font-weight: 600;
    left:50%;
    top:-3.5px;
    transform: translateX(-50%)  translateY(10%);
}


.check label
{
    color: hsl(0,0%,100%);
    font-size: 1.25rem;
    letter-spacing: 2px;
}

.copytext {
    opacity:0; /* Initially hidden */
    transition: opacity 3s ease-out; /* Smooth fade effect */
}

.copytext.active {
    opacity: 1; /* Fully visible */
    transition: opacity 1s;
}

/* .slider
{
    width: 100%;
    appearance: none;
     background-color: hsl(198,20%,13%); 
    border-radius: 1rem;
    margin-top: 2rem;
    margin-bottom: 1.5rem;
    height: 0.75rem;
    background-image: linear-gradient(hsl(285,91%,52%),hsl(285,91%,52%));
}

.slider:hover
{
    cursor: pointer;
} */

/* to access slider thumb*/

/* .slider::-webkit-slider-thumb
{ 
    /* position: relative; */
    /* to make slider thumb over the outline*/

    /* appearance: none;
    height: 2rem;
    width: 2rem;
    border-radius: 50%;
    background-color: yellow;
    margin-top: -3px; */
     
    /* box-shadow: 0px 0px 0px 20px rgba(255,229,61,0.50); */
    /* transition: all 100ms ease-in;*/

/*} */

/* .slider:focus
{
    outline: 3px solid  hsl(52,100%,62%);
    
}

.slider::-webkit-slider-thumb:hover
{
    outline: 2px solid  hsl(52,100%,62%);
    background-color:hsl(268,75%,9%); */
    /* box-shadow:0px 0px 25px 5px rgba(255,229,61,0.8); */

/*}*/


/* for copy text and image see--mini proj---1:55 */
